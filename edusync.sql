-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.accommodation_images
(
    image_id serial NOT NULL,
    property_id integer NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    is_primary boolean DEFAULT false,
    CONSTRAINT accommodation_images_pkey PRIMARY KEY (image_id)
);

CREATE TABLE IF NOT EXISTS public.accommodation_inquiries
(
    inquiry_id serial NOT NULL,
    property_id integer NOT NULL,
    inquirer_id integer NOT NULL,
    message text COLLATE pg_catalog."default",
    contact_phone character varying(20) COLLATE pg_catalog."default",
    preferred_date date,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT accommodation_inquiries_pkey PRIMARY KEY (inquiry_id)
);

CREATE TABLE IF NOT EXISTS public.accommodation_properties
(
    property_id serial NOT NULL,
    owner_id integer NOT NULL,
    property_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    location character varying(255) COLLATE pg_catalog."default" NOT NULL,
    area character varying(100) COLLATE pg_catalog."default",
    rent_amount numeric(12, 2) NOT NULL,
    deposit_amount numeric(12, 2) DEFAULT 0,
    property_size character varying(50) COLLATE pg_catalog."default",
    amenities text[] COLLATE pg_catalog."default",
    available_from date,
    is_available boolean DEFAULT true,
    is_verified boolean DEFAULT false,
    contact_phone character varying(20) COLLATE pg_catalog."default",
    contact_email character varying(150) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT accommodation_properties_pkey PRIMARY KEY (property_id)
);

CREATE TABLE IF NOT EXISTS public.admin_logs
(
    log_id serial NOT NULL,
    admin_id integer NOT NULL,
    action character varying(100) COLLATE pg_catalog."default" NOT NULL,
    target_type character varying(50) COLLATE pg_catalog."default",
    target_id integer,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT admin_logs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.business_applications
(
    application_id serial NOT NULL,
    user_id integer NOT NULL,
    business_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    business_type character varying(100) COLLATE pg_catalog."default",
    license_info text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    applied_at timestamp without time zone DEFAULT now(),
    reviewed_at timestamp without time zone,
    review_comments text COLLATE pg_catalog."default",
    CONSTRAINT business_applications_pkey PRIMARY KEY (application_id)
);

CREATE TABLE IF NOT EXISTS public.business_order_items
(
    order_item_id serial NOT NULL,
    order_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL,
    price numeric(12, 2),
    terms_accepted boolean DEFAULT false,
    CONSTRAINT business_order_items_pkey PRIMARY KEY (order_item_id)
);

CREATE TABLE IF NOT EXISTS public.business_orders
(
    order_id serial NOT NULL,
    user_id integer NOT NULL,
    business_id integer NOT NULL,
    order_date timestamp without time zone DEFAULT now(),
    payment_method character varying(20) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    total_amount numeric(12, 2) DEFAULT 0,
    delivery_address text COLLATE pg_catalog."default",
    special_instructions text COLLATE pg_catalog."default",
    payment_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    rating integer,
    review text COLLATE pg_catalog."default",
    reviewed_at timestamp without time zone,
    CONSTRAINT business_orders_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.business_products
(
    product_id serial NOT NULL,
    business_id integer NOT NULL,
    product_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    price numeric(12, 2) NOT NULL,
    stock_quantity integer NOT NULL DEFAULT 1,
    terms_conditions text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    category character varying(100) COLLATE pg_catalog."default",
    image text COLLATE pg_catalog."default",
    CONSTRAINT business_products_pkey PRIMARY KEY (product_id)
);

CREATE TABLE IF NOT EXISTS public.businesses
(
    business_id serial NOT NULL,
    owner_id integer NOT NULL,
    business_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    business_type character varying(100) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_verified boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    image text COLLATE pg_catalog."default",
    CONSTRAINT businesses_pkey PRIMARY KEY (business_id)
);

CREATE TABLE IF NOT EXISTS public.categories
(
    category_id serial NOT NULL,
    category_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    category_type character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT categories_pkey PRIMARY KEY (category_id),
    CONSTRAINT categories_category_name_key UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS public.chat_messages
(
    message_id serial NOT NULL,
    chat_id integer NOT NULL,
    sender_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT chat_messages_pkey PRIMARY KEY (message_id)
);

CREATE TABLE IF NOT EXISTS public.chats
(
    chat_id serial NOT NULL,
    item_id integer,
    seller_id integer NOT NULL,
    buyer_id integer NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT chats_pkey PRIMARY KEY (chat_id),
    CONSTRAINT chats_item_id_seller_id_buyer_id_key UNIQUE (item_id, seller_id, buyer_id)
);

CREATE TABLE IF NOT EXISTS public.email_verification_tokens
(
    token_id serial NOT NULL,
    user_id integer,
    email character varying(150) COLLATE pg_catalog."default" NOT NULL,
    otp_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    expires_at timestamp without time zone NOT NULL,
    used boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT email_verification_tokens_pkey PRIMARY KEY (token_id),
    CONSTRAINT email_verification_tokens_email_otp_code_key UNIQUE (email, otp_code)
);

CREATE TABLE IF NOT EXISTS public.food_item_images
(
    image_id serial NOT NULL,
    food_item_id integer NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT food_item_images_pkey PRIMARY KEY (image_id)
);

CREATE TABLE IF NOT EXISTS public.food_items
(
    food_item_id serial NOT NULL,
    vendor_id integer NOT NULL,
    item_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    price numeric(12, 2) NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT food_items_pkey PRIMARY KEY (food_item_id)
);

CREATE TABLE IF NOT EXISTS public.food_order_items
(
    order_item_id serial NOT NULL,
    order_id integer NOT NULL,
    food_item_id integer NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT food_order_items_pkey PRIMARY KEY (order_item_id)
);

CREATE TABLE IF NOT EXISTS public.food_orders
(
    order_id serial NOT NULL,
    user_id integer NOT NULL,
    vendor_id integer NOT NULL,
    order_date date NOT NULL,
    order_placed_at timestamp without time zone DEFAULT now(),
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    total_amount numeric(12, 2) DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    rating integer,
    review text COLLATE pg_catalog."default",
    reviewed_at timestamp without time zone,
    estimated_delivery_time timestamp without time zone,
    delivered_at timestamp without time zone,
    CONSTRAINT food_orders_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.food_vendor_applications
(
    application_id serial NOT NULL,
    user_id integer NOT NULL,
    restaurant_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    cuisine character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address text COLLATE pg_catalog."default" NOT NULL,
    phone character varying(30) COLLATE pg_catalog."default" NOT NULL,
    license_info text COLLATE pg_catalog."default",
    operating_hours text COLLATE pg_catalog."default",
    delivery_areas jsonb,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    applied_at timestamp without time zone DEFAULT now(),
    reviewed_at timestamp without time zone,
    review_comments text COLLATE pg_catalog."default",
    CONSTRAINT food_vendor_applications_pkey PRIMARY KEY (application_id)
);

CREATE TABLE IF NOT EXISTS public.food_vendors
(
    vendor_id serial NOT NULL,
    user_id integer NOT NULL,
    shop_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_verified boolean DEFAULT false,
    applied_at timestamp without time zone DEFAULT now(),
    verified_at timestamp without time zone,
    is_active boolean DEFAULT true,
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT food_vendors_pkey PRIMARY KEY (vendor_id)
);

CREATE TABLE IF NOT EXISTS public.free_marketplace_favorites
(
    favorite_id serial NOT NULL,
    user_id integer NOT NULL,
    item_id integer NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT free_marketplace_favorites_pkey PRIMARY KEY (favorite_id),
    CONSTRAINT free_marketplace_favorites_user_id_item_id_key UNIQUE (user_id, item_id)
);

CREATE TABLE IF NOT EXISTS public.free_marketplace_items
(
    item_id serial NOT NULL,
    giver_id integer NOT NULL,
    category_id integer,
    item_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    condition_note text COLLATE pg_catalog."default",
    pickup_location character varying(255) COLLATE pg_catalog."default",
    contact_info character varying(255) COLLATE pg_catalog."default",
    is_available boolean DEFAULT true,
    posted_at timestamp without time zone DEFAULT now(),
    CONSTRAINT free_marketplace_items_pkey PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.free_marketplace_requests
(
    request_id serial NOT NULL,
    item_id integer NOT NULL,
    requester_id integer NOT NULL,
    message text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT free_marketplace_requests_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.job_applications
(
    application_id serial NOT NULL,
    job_id integer NOT NULL,
    applicant_id integer NOT NULL,
    cover_letter text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    applied_at timestamp without time zone DEFAULT now(),
    CONSTRAINT job_applications_pkey PRIMARY KEY (application_id),
    CONSTRAINT job_applications_job_id_applicant_id_key UNIQUE (job_id, applicant_id)
);

CREATE TABLE IF NOT EXISTS public.jobs
(
    job_id serial NOT NULL,
    user_id integer NOT NULL,
    title character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    location character varying(150) COLLATE pg_catalog."default",
    job_type character varying(50) COLLATE pg_catalog."default",
    salary_range character varying(100) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT jobs_pkey PRIMARY KEY (job_id)
);

CREATE TABLE IF NOT EXISTS public.lost_found_items
(
    item_id serial NOT NULL,
    user_id integer NOT NULL,
    item_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    title character varying(150) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    location character varying(255) COLLATE pg_catalog."default",
    contact_info character varying(255) COLLATE pg_catalog."default",
    is_claimed boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT lost_found_items_pkey PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.notices
(
    notice_id serial NOT NULL,
    posted_by integer NOT NULL,
    title character varying(150) COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default",
    category character varying(100) COLLATE pg_catalog."default",
    is_pinned boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT notices_pkey PRIMARY KEY (notice_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    user_id integer NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" DEFAULT 'system'::character varying,
    title character varying(150) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    data jsonb,
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    payment_id serial NOT NULL,
    buyer_id integer NOT NULL,
    seller_id integer NOT NULL,
    product_id integer,
    amount numeric(14, 2) NOT NULL,
    payment_method character varying(50) COLLATE pg_catalog."default" NOT NULL,
    platform_fee numeric(14, 2) DEFAULT 0.00,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'success'::character varying,
    transaction_reference character varying(100) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT payments_pkey PRIMARY KEY (payment_id)
);

CREATE TABLE IF NOT EXISTS public.rental_orders
(
    rental_order_id serial NOT NULL,
    renter_id integer NOT NULL,
    rental_id integer NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT rental_orders_pkey PRIMARY KEY (rental_order_id)
);

CREATE TABLE IF NOT EXISTS public.rental_products
(
    rental_id serial NOT NULL,
    owner_id integer NOT NULL,
    category_id integer,
    product_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    rent_per_day numeric(12, 2) NOT NULL,
    available_from date,
    terms_conditions text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    CONSTRAINT rental_products_pkey PRIMARY KEY (rental_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id serial NOT NULL,
    role_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS public.secondhand_items
(
    item_id serial NOT NULL,
    seller_id integer NOT NULL,
    category_id integer,
    item_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    price numeric(12, 2) NOT NULL,
    condition character varying(50) COLLATE pg_catalog."default",
    terms_conditions text COLLATE pg_catalog."default",
    posted_at timestamp without time zone DEFAULT now(),
    is_active boolean DEFAULT true,
    CONSTRAINT secondhand_items_pkey PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.secondhand_orders
(
    order_id serial NOT NULL,
    buyer_id integer NOT NULL,
    item_id integer NOT NULL,
    order_date timestamp without time zone DEFAULT now(),
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    CONSTRAINT secondhand_orders_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.transactions
(
    transaction_id serial NOT NULL,
    wallet_id integer NOT NULL,
    amount numeric(14, 2) NOT NULL,
    transaction_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'completed'::character varying,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    user_id integer,
    type character varying(50) COLLATE pg_catalog."default",
    payment_method character varying(50) COLLATE pg_catalog."default",
    reference_number character varying(100) COLLATE pg_catalog."default",
    metadata jsonb,
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT transactions_pkey PRIMARY KEY (transaction_id)
);

CREATE TABLE IF NOT EXISTS public.user_statistics
(
    stat_id serial NOT NULL,
    user_id integer NOT NULL,
    login_count integer DEFAULT 0,
    last_login timestamp without time zone,
    total_purchases numeric(12, 2) DEFAULT 0,
    total_sales numeric(12, 2) DEFAULT 0,
    items_posted integer DEFAULT 0,
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT user_statistics_pkey PRIMARY KEY (stat_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    full_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(150) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    role_id integer NOT NULL,
    institution character varying(100) COLLATE pg_catalog."default",
    location character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    profile_picture text COLLATE pg_catalog."default",
    is_email_verified boolean DEFAULT false,
    email_verified_at timestamp without time zone,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.wallets
(
    wallet_id serial NOT NULL,
    user_id integer NOT NULL,
    balance numeric(14, 2) NOT NULL DEFAULT 0.00,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT wallets_pkey PRIMARY KEY (wallet_id),
    CONSTRAINT wallets_user_id_key UNIQUE (user_id)
);

ALTER TABLE IF EXISTS public.accommodation_images
    ADD CONSTRAINT accommodation_images_property_id_fkey FOREIGN KEY (property_id)
    REFERENCES public.accommodation_properties (property_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.accommodation_inquiries
    ADD CONSTRAINT accommodation_inquiries_inquirer_id_fkey FOREIGN KEY (inquirer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.accommodation_inquiries
    ADD CONSTRAINT accommodation_inquiries_property_id_fkey FOREIGN KEY (property_id)
    REFERENCES public.accommodation_properties (property_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.accommodation_properties
    ADD CONSTRAINT accommodation_properties_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_accommodation_owner
    ON public.accommodation_properties(owner_id);


ALTER TABLE IF EXISTS public.admin_logs
    ADD CONSTRAINT admin_logs_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.business_applications
    ADD CONSTRAINT business_applications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.business_order_items
    ADD CONSTRAINT business_order_items_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.business_orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.business_order_items
    ADD CONSTRAINT business_order_items_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.business_products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.business_orders
    ADD CONSTRAINT business_orders_business_id_fkey FOREIGN KEY (business_id)
    REFERENCES public.businesses (business_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.business_orders
    ADD CONSTRAINT business_orders_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_business_orders_user
    ON public.business_orders(user_id);


ALTER TABLE IF EXISTS public.business_products
    ADD CONSTRAINT business_products_business_id_fkey FOREIGN KEY (business_id)
    REFERENCES public.businesses (business_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_products_business
    ON public.business_products(business_id);


ALTER TABLE IF EXISTS public.businesses
    ADD CONSTRAINT businesses_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_businesses_owner
    ON public.businesses(owner_id);


ALTER TABLE IF EXISTS public.chat_messages
    ADD CONSTRAINT chat_messages_chat_id_fkey FOREIGN KEY (chat_id)
    REFERENCES public.chats (chat_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_chat_messages_chat
    ON public.chat_messages(chat_id);


ALTER TABLE IF EXISTS public.chat_messages
    ADD CONSTRAINT chat_messages_sender_id_fkey FOREIGN KEY (sender_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.chats
    ADD CONSTRAINT chats_buyer_id_fkey FOREIGN KEY (buyer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.chats
    ADD CONSTRAINT chats_item_id_fkey FOREIGN KEY (item_id)
    REFERENCES public.secondhand_items (item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.chats
    ADD CONSTRAINT chats_seller_id_fkey FOREIGN KEY (seller_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.email_verification_tokens
    ADD CONSTRAINT email_verification_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.food_item_images
    ADD CONSTRAINT food_item_images_food_item_id_fkey FOREIGN KEY (food_item_id)
    REFERENCES public.food_items (food_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.food_items
    ADD CONSTRAINT food_items_vendor_id_fkey FOREIGN KEY (vendor_id)
    REFERENCES public.food_vendors (vendor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.food_order_items
    ADD CONSTRAINT food_order_items_food_item_id_fkey FOREIGN KEY (food_item_id)
    REFERENCES public.food_items (food_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.food_order_items
    ADD CONSTRAINT food_order_items_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.food_orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.food_orders
    ADD CONSTRAINT food_orders_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_food_orders_user
    ON public.food_orders(user_id);


ALTER TABLE IF EXISTS public.food_orders
    ADD CONSTRAINT food_orders_vendor_id_fkey FOREIGN KEY (vendor_id)
    REFERENCES public.food_vendors (vendor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.food_vendor_applications
    ADD CONSTRAINT food_vendor_applications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.food_vendors
    ADD CONSTRAINT food_vendors_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.free_marketplace_favorites
    ADD CONSTRAINT free_marketplace_favorites_item_id_fkey FOREIGN KEY (item_id)
    REFERENCES public.free_marketplace_items (item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.free_marketplace_favorites
    ADD CONSTRAINT free_marketplace_favorites_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.free_marketplace_items
    ADD CONSTRAINT free_marketplace_items_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.free_marketplace_items
    ADD CONSTRAINT free_marketplace_items_giver_id_fkey FOREIGN KEY (giver_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_free_items_giver
    ON public.free_marketplace_items(giver_id);


ALTER TABLE IF EXISTS public.free_marketplace_requests
    ADD CONSTRAINT free_marketplace_requests_item_id_fkey FOREIGN KEY (item_id)
    REFERENCES public.free_marketplace_items (item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_free_requests_item
    ON public.free_marketplace_requests(item_id);


ALTER TABLE IF EXISTS public.free_marketplace_requests
    ADD CONSTRAINT free_marketplace_requests_requester_id_fkey FOREIGN KEY (requester_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.job_applications
    ADD CONSTRAINT job_applications_applicant_id_fkey FOREIGN KEY (applicant_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.job_applications
    ADD CONSTRAINT job_applications_job_id_fkey FOREIGN KEY (job_id)
    REFERENCES public.jobs (job_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.jobs
    ADD CONSTRAINT jobs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lost_found_items
    ADD CONSTRAINT lost_found_items_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notices
    ADD CONSTRAINT notices_posted_by_fkey FOREIGN KEY (posted_by)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_buyer_id_fkey FOREIGN KEY (buyer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payments_buyer
    ON public.payments(buyer_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.business_products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_seller_id_fkey FOREIGN KEY (seller_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_payments_seller
    ON public.payments(seller_id);


ALTER TABLE IF EXISTS public.rental_orders
    ADD CONSTRAINT rental_orders_rental_id_fkey FOREIGN KEY (rental_id)
    REFERENCES public.rental_products (rental_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rental_orders
    ADD CONSTRAINT rental_orders_renter_id_fkey FOREIGN KEY (renter_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rental_products
    ADD CONSTRAINT rental_products_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rental_products
    ADD CONSTRAINT rental_products_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_rental_products_owner
    ON public.rental_products(owner_id);


ALTER TABLE IF EXISTS public.secondhand_items
    ADD CONSTRAINT secondhand_items_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_secondhand_category
    ON public.secondhand_items(category_id);


ALTER TABLE IF EXISTS public.secondhand_items
    ADD CONSTRAINT secondhand_items_seller_id_fkey FOREIGN KEY (seller_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_secondhand_seller
    ON public.secondhand_items(seller_id);


ALTER TABLE IF EXISTS public.secondhand_orders
    ADD CONSTRAINT secondhand_orders_buyer_id_fkey FOREIGN KEY (buyer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.secondhand_orders
    ADD CONSTRAINT secondhand_orders_item_id_fkey FOREIGN KEY (item_id)
    REFERENCES public.secondhand_items (item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transactions_wallet_id_fkey FOREIGN KEY (wallet_id)
    REFERENCES public.wallets (wallet_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_transactions_wallet
    ON public.transactions(wallet_id);


ALTER TABLE IF EXISTS public.user_statistics
    ADD CONSTRAINT user_statistics_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_users_role
    ON public.users(role_id);


ALTER TABLE IF EXISTS public.wallets
    ADD CONSTRAINT wallets_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS wallets_user_id_key
    ON public.wallets(user_id);

END;